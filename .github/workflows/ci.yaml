name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  configure-database-service:
    name: Configure Database Service
    runs-on: ubuntu-20.04
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      empty: ${{ steps.set-services.outputs.empty }}
    steps:
      - id: set-services
        name: Set Services
        run: |
          echo "::set-output name=services::{\"postgres\":{\"image\":\"postgres:13\",\"env\":{\"POSTGRES_USER\":\"postgres\",\"POSTGRES_PASSWORD\":\"password\"},\"ports\":[\"5432/tcp\"],\"options\":\"--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\"}}"
          echo "::set-output name=empty::{\"alpine\":{\"image\":\"alpine\"}}"
  ci:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        node-version:
          - 16
        package:
          - database-testing
          - firebase
          - firebase-auth
          - firebase-cloud-messaging
          - google-cloud-pubsub
          - google-cloud-trace
    runs-on: ${{ matrix.os }}
    needs: configure-database-service
    services: ${{ matrix.package == 'database-testing' && fromJSON(needs.configure-database-service.outputs.services) || fromJSON(needs.configure-database-service.outputs.empty) }}
    name: CI (${{ matrix.package }})
    steps:
      - name: Configure Git
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Calculate path filters
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            ${{ matrix.package }}:
              - '${{ matrix.package }}/**/*'
      - name: Setup Node.js for use with actions
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup dependency cache
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.package }}/node_modules
          key: ${{ matrix.os }}-node-${{ matrix.node-version }}-${{ hashFiles(env.PACKAGE_LOCK_PATH) }}
        env:
          PACKAGE_LOCK_PATH: ${{ matrix.package }}/package-lock.json
      - name: Setup .npmrc
        if: ${{ steps.filter.outputs[matrix.package] == 'true' && steps.cache.outputs.cache-hit != 'true' }}
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
        working-directory: ${{ matrix.package }}
      - name: Install dependencies
        if: ${{ steps.filter.outputs[matrix.package] == 'true' && steps.cache.outputs.cache-hit != 'true' }}
        run: npm ci
        working-directory: ${{ matrix.package }}
      - name: Lint code
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        run: npm run lint:code
        working-directory: ${{ matrix.package }}
      - name: Lint styling
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        run: npm run lint:style
        working-directory: ${{ matrix.package }}
      - name: Run unit tests
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        run: npm run test:unit:coverage
        working-directory: ${{ matrix.package }}
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          TEST_DATABASE_NAME: foo
      - name: Build
        if: ${{ steps.filter.outputs[matrix.package] == 'true' }}
        run: npm run build
        working-directory: ${{ matrix.package }}
